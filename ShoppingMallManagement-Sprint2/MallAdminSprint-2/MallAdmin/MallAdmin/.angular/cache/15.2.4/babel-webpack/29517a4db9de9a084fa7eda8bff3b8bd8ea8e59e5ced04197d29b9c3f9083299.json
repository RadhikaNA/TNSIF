{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CustomerService {\n  constructor(http) {\n    this.http = http;\n    this.API = \"http://localhost:8066\"; // Base API URL\n  }\n  /**\r\n   * Registers a new customer.\r\n   * @param customerData - The customer data to register.\r\n   */\n  registerCustomer(customerData) {\n    return this.http.post(`${this.API}/customers`, customerData);\n  }\n  /**\r\n   * Fetches all customers from the backend.\r\n   */\n  getCustomers() {\n    return this.http.get(`${this.API}/customers`);\n  }\n  /**\r\n   * Deletes a customer by ID.\r\n   * @param customerId - The ID of the customer to delete.\r\n   */\n  deleteCustomer(customerId) {\n    return this.http.delete(`${this.API}/customers/${customerId}`);\n  }\n  /**\r\n   * Updates a customer's details.\r\n   * @param customer - The updated customer data.\r\n   */\n  updateCustomer(customer) {\n    const customerId = customer.CustomerId; // Use `CustomerId` extracted in the component\n    if (!customerId) {\n      throw new Error('Customer ID is required for updating customer data.');\n    }\n    return this.http.put(`${this.API}/customers/${customerId}`, customer);\n  }\n}\nCustomerService.ɵfac = function CustomerService_Factory(t) {\n  return new (t || CustomerService)(i0.ɵɵinject(i1.HttpClient));\n};\nCustomerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CustomerService,\n  factory: CustomerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,QAAG,GAAG,uBAAuB,CAAC,CAAE;EAEO;EAEvC;;;;EAIOC,gBAAgB,CAACC,YAAiB;IACvC,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,GAAG,YAAY,EAAEF,YAAY,CAAC;EAC9D;EAEA;;;EAGOG,YAAY;IACjB,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,GAAG,IAAI,CAACF,GAAG,YAAY,CAAC;EAC/C;EAEA;;;;EAIOG,cAAc,CAACC,UAAkB;IACtC,OAAO,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC,GAAG,IAAI,CAACL,GAAG,cAAcI,UAAU,EAAE,CAAC;EAChE;EAEA;;;;EAIOE,cAAc,CAACC,QAAa;IACjC,MAAMH,UAAU,GAAGG,QAAQ,CAACC,UAAU,CAAC,CAAC;IACxC,IAAI,CAACJ,UAAU,EAAE;MACf,MAAM,IAAIK,KAAK,CAAC,qDAAqD,CAAC;;IAExE,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACV,GAAG,cAAcI,UAAU,EAAE,EAAEG,QAAQ,CAAC;EACvE;;AAtCWb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAiB,SAAfjB,eAAe;EAAAkB,YAFd;AAAM","names":["CustomerService","constructor","http","registerCustomer","customerData","post","API","getCustomers","get","deleteCustomer","customerId","delete","updateCustomer","customer","CustomerId","Error","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\surav\\OneDrive\\Desktop\\Customer1,12\\Customer\\Customer\\Customer\\src\\app\\Customer.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CustomerService {\n  API = \"http://localhost:8066\";  // Base API URL\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Registers a new customer.\n   * @param customerData - The customer data to register.\n   */\n  public registerCustomer(customerData: any) {\n    return this.http.post(`${this.API}/customers`, customerData);\n  }\n\n  /**\n   * Fetches all customers from the backend.\n   */\n  public getCustomers() {\n    return this.http.get(`${this.API}/customers`);\n  }\n\n  /**\n   * Deletes a customer by ID.\n   * @param customerId - The ID of the customer to delete.\n   */\n  public deleteCustomer(customerId: number) {\n    return this.http.delete(`${this.API}/customers/${customerId}`);\n  }\n\n  /**\n   * Updates a customer's details.\n   * @param customer - The updated customer data.\n   */\n  public updateCustomer(customer: any) {\n    const customerId = customer.CustomerId; // Use `CustomerId` extracted in the component\n    if (!customerId) {\n      throw new Error('Customer ID is required for updating customer data.');\n    }\n    return this.http.put(`${this.API}/customers/${customerId}`, customer);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}