{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ShopOwnerService {\n  constructor(http) {\n    this.http = http;\n    this.API = \"http://localhost:8066\";\n  }\n  // Register a new shop owner\n  registerShopOwners(shopOwnerData) {\n    return this.http.post(`${this.API}/shopowner`, shopOwnerData); // Fixed plural inconsistency\n  }\n  // Retrieve all shop owners\n  getShopOwners() {\n    return this.http.get(`${this.API}/shopowner`);\n  }\n  // Delete a shop owner by ID\n  deleteShopOwners(ShopOwnerId) {\n    return this.http.delete(`${this.API}/shopowner/${ShopOwnerId}`);\n  }\n  // Update an existing shop owner\n  updateShopOwners(shopOwner) {\n    const ShopOwnerId = shopOwner.id; // ID field should align with backend expectations\n    if (!ShopOwnerId) {\n      throw new Error(\"ShopOwner ID is missing. Cannot update without a valid ID.\");\n    }\n    return this.http.put(`${this.API}/shopowner/${ShopOwnerId}`, shopOwner); // Corrected endpoint\n  }\n}\n\nShopOwnerService.ɵfac = function ShopOwnerService_Factory(t) {\n  return new (t || ShopOwnerService)(i0.ɵɵinject(i1.HttpClient));\n};\nShopOwnerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShopOwnerService,\n  factory: ShopOwnerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,gBAAgB;EAG3BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,QAAG,GAAG,uBAAuB;EAEU;EAEvC;EACAC,kBAAkB,CAACC,aAAkB;IACnC,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAG,IAAI,CAACC,GAAG,YAAY,EAAEF,aAAa,CAAC,CAAC,CAAC;EACjE;EAEA;EACAG,aAAa;IACX,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAC,GAAG,IAAI,CAACF,GAAG,YAAY,CAAC;EAC/C;EAEA;EACAG,gBAAgB,CAACC,WAAmB;IAClC,OAAO,IAAI,CAACR,IAAI,CAACS,MAAM,CAAC,GAAG,IAAI,CAACL,GAAG,cAAcI,WAAW,EAAE,CAAC;EACjE;EAEA;EACAE,gBAAgB,CAACC,SAAc;IAC7B,MAAMH,WAAW,GAAGG,SAAS,CAACC,EAAE,CAAC,CAAC;IAClC,IAAI,CAACJ,WAAW,EAAE;MAChB,MAAM,IAAIK,KAAK,CAAC,4DAA4D,CAAC;;IAE/E,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACV,GAAG,cAAcI,WAAW,EAAE,EAAEG,SAAS,CAAC,CAAC,CAAC;EAC3E;;;AA3BWb,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAiB,SAAhBjB,gBAAgB;EAAAkB,YAFf;AAAM","names":["ShopOwnerService","constructor","http","registerShopOwners","shopOwnerData","post","API","getShopOwners","get","deleteShopOwners","ShopOwnerId","delete","updateShopOwners","shopOwner","id","Error","put","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\surav\\OneDrive\\Desktop\\ShopOwner (2)\\ShopOwner\\src\\app\\ShopOwner.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShopOwnerService {\n  API = \"http://localhost:8066\";\n\n  constructor(private http: HttpClient) {}\n\n  // Register a new shop owner\n  registerShopOwners(shopOwnerData: any) {\n    return this.http.post(`${this.API}/shopowner`, shopOwnerData); // Fixed plural inconsistency\n  }\n\n  // Retrieve all shop owners\n  getShopOwners() {\n    return this.http.get(`${this.API}/shopowner`);\n  }\n\n  // Delete a shop owner by ID\n  deleteShopOwners(ShopOwnerId: number) {\n    return this.http.delete(`${this.API}/shopowner/${ShopOwnerId}`);\n  }\n\n  // Update an existing shop owner\n  updateShopOwners(shopOwner: any) {\n    const ShopOwnerId = shopOwner.id; // ID field should align with backend expectations\n    if (!ShopOwnerId) {\n      throw new Error(\"ShopOwner ID is missing. Cannot update without a valid ID.\");\n    }\n    return this.http.put(`${this.API}/shopowner/${ShopOwnerId}`, shopOwner); // Corrected endpoint\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}