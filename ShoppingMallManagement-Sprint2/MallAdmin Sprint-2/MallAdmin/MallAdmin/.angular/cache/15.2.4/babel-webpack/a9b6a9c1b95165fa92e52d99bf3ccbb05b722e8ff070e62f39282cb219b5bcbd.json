{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet ShopOwnerComponent = class ShopOwnerComponent {\n  constructor(ShopOwnerservice) {\n    this.ShopOwnerservice = ShopOwnerservice;\n    this.title = 'shop-owner'; // Updated the title to reflect the shop owner module\n    // Array to hold the orders managed by the shop owner\n    this.shopOrders = [];\n    // Object to hold the details of the order to be updated by the shop owner\n    this.orderToUpdate = {\n      orderId: null,\n      customerName: '',\n      product: '',\n      quantity: 0,\n      description: ''\n    };\n  } // Injected ShopOwnerService\n  ngOnInit() {\n    // Fetch all orders when the component initializes\n    this.getShopOrders();\n  }\n  // Register a new order for the shop\n  registerOrder(registerForm) {\n    this.ShopOwnerDetailsService.registerOrder(registerForm.value).subscribe(response => {\n      console.log('Order registered for shop:', response);\n      registerForm.reset(); // Reset the form after successful registration\n      this.getShopOrders(); // Fetch updated orders\n    }, error => {\n      console.error('Error registering order:', error);\n    });\n  }\n  // Get all orders for the shop\n  getShopOrders() {\n    this.ShopOwnerDetailsService.getShopOrders().subscribe(response => {\n      console.log('Fetched shop orders:', response);\n      // Ensure the response is an array, then map to a format that suits your needs\n      if (Array.isArray(response)) {\n        this.shopOrders = response.map(order => ({\n          ...order,\n          orderId: order.orderId || order.id // Align with your response structure\n        }));\n      } else {\n        console.error('Unexpected response structure:', response);\n      }\n    }, error => {\n      console.error('Error fetching shop orders:', error);\n    });\n  }\n  // Delete an order from the shop\n  deleteOrder(order) {\n    if (!order.orderId) {\n      // Ensure orderId exists before attempting to delete\n      console.error('Order ID is undefined. Cannot delete order.');\n      return;\n    }\n    console.log('Deleting order with ID:', order.orderId);\n    this.ShopOwnerDetailsService.deleteShopOrder(order.orderId).subscribe(response => {\n      console.log('Order deleted from shop:', response);\n      this.getShopOrders(); // Refresh the list of orders after deletion\n    }, error => {\n      console.error('Error deleting order from shop:', error);\n    });\n  }\n  // Edit an order in the shop to prepare for updating\n  editOrder(order) {\n    this.orderToUpdate = {\n      ...order\n    }; // Copy the order data to be updated\n  }\n  // Update an existing order for the shop\n  updateShopOrder() {\n    this.ShopOwnerDetailsService.updateShopOrder(this.orderToUpdate).subscribe(response => {\n      console.log('Shop order updated:', response);\n      this.getShopOrders(); // Fetch updated orders after successful update\n    }, error => {\n      console.error('Error updating shop order:', error);\n    });\n  }\n};\nShopOwnerComponent = __decorate([Component({\n  selector: 'app-shop-owner-root',\n  templateUrl: './shopOwner.component.html',\n  styleUrls: ['./shopOwner.component.scss'] // Updated the style file name\n})], ShopOwnerComponent);\nexport { ShopOwnerComponent };","map":{"version":3,"mappings":"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","names":["Component","ShopOwnerComponent","constructor","ShopOwnerservice","orderId","customerName","product","quantity","description","ngOnInit","getShopOrders","registerOrder","registerForm","ShopOwnerDetailsService","value","subscribe","response","console","log","reset","error","Array","isArray","shopOrders","map","order","id","deleteOrder","deleteShopOrder","editOrder","orderToUpdate","updateShopOrder","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\COLLEGE\\TNSIF\\sprint 2\\ShopOwner\\ShopOwner\\src\\app\\shopowner.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ShopOwnerDetailsService } from './ShopOwnerDetails.Service';  // Service name changed to reflect the new context\n\n@Component({\n  selector: 'app-shop-owner-root',  // Changed the selector to match the ShopOwner context\n  templateUrl: './shopOwner.component.html',  // Updated the template file name\n  styleUrls: ['./shopOwner.component.scss']  // Updated the style file name\n})\nexport class ShopOwnerComponent implements OnInit {  // Updated component class name\n  title = 'shop-owner';  // Updated the title to reflect the shop owner module\n\n  constructor(private ShopOwnerservice: ShopOwnerDetailsService) {}  // Injected ShopOwnerService\n\n  // Array to hold the orders managed by the shop owner\n  shopOrders: any[] = [];\n\n  // Object to hold the details of the order to be updated by the shop owner\n  orderToUpdate = {\n    orderId: null,  // Make sure the orderId is aligned with the service\n    customerName: '',\n    product: '',\n    quantity: 0,\n    description: ''\n  };\n\n  ngOnInit(): void {\n    // Fetch all orders when the component initializes\n    this.getShopOrders();\n  }\n\n  // Register a new order for the shop\n  registerOrder(registerForm: NgForm): void {\n    this.ShopOwnerDetailsService.registerOrder(registerForm.value).subscribe(\n      (response: any) => {\n        console.log('Order registered for shop:', response);\n        registerForm.reset();  // Reset the form after successful registration\n        this.getShopOrders();  // Fetch updated orders\n      },\n      (error: any) => {\n        console.error('Error registering order:', error);\n      }\n    );\n  }\n\n  // Get all orders for the shop\n  getShopOrders(): void {\n    this.ShopOwnerDetailsService.getShopOrders().subscribe(\n      (response: any) => {\n        console.log('Fetched shop orders:', response);\n\n        // Ensure the response is an array, then map to a format that suits your needs\n        if (Array.isArray(response)) {\n          this.shopOrders = response.map(order => ({\n            ...order,\n            orderId: order.orderId || order.id  // Align with your response structure\n          }));\n        } else {\n          console.error('Unexpected response structure:', response);\n        }\n      },\n      (error: any) => {\n        console.error('Error fetching shop orders:', error);\n      }\n    );\n  }\n\n  // Delete an order from the shop\n  deleteOrder(order: any): void {\n    if (!order.orderId) {  // Ensure orderId exists before attempting to delete\n      console.error('Order ID is undefined. Cannot delete order.');\n      return;\n    }\n\n    console.log('Deleting order with ID:', order.orderId);\n    this.ShopOwnerDetailsService.deleteShopOrder(order.orderId).subscribe(\n      (response: any) => {\n        console.log('Order deleted from shop:', response);\n        this.getShopOrders();  // Refresh the list of orders after deletion\n      },\n      (error: any) => {\n        console.error('Error deleting order from shop:', error);\n      }\n    );\n  }\n\n  // Edit an order in the shop to prepare for updating\n  editOrder(order: any): void {\n    this.orderToUpdate = { ...order };  // Copy the order data to be updated\n  }\n\n  // Update an existing order for the shop\n  updateShopOrder(): void {\n    this.ShopOwnerDetailsService.updateShopOrder(this.orderToUpdate).subscribe(\n      (response: any) => {\n        console.log('Shop order updated:', response);\n        this.getShopOrders();  // Fetch updated orders after successful update\n      },\n      (error: any) => {\n        console.error('Error updating shop order:', error);\n      }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}